package main

import (
	"sort"
	"strings"
)

type lessFunc func(c1, c2 *CVSS) bool

// multiSorter implements the Sort interface, sorting the changes within.
type multiSorter struct {
	cves []CVSS
	less []lessFunc
}

// Sort sorts the argument slice according to the less functions passed to OrderedBy.
func (ms *multiSorter) Sort(cvsslist []CVSS) {
	ms.cves = cvsslist
	sort.Sort(ms)
}

// OrderedBy returns a Sorter that sorts using the less functions, in order.
// Call its Sort method to sort the data.
func OrderedBy(less ...lessFunc) *multiSorter {
	return &multiSorter{
		less: less,
	}
}

// Len is part of sort.Interface.
func (ms *multiSorter) Len() int {
	return len(ms.cves)
}

// Swap is part of sort.Interface.
func (ms *multiSorter) Swap(i, j int) {
	ms.cves[i], ms.cves[j] = ms.cves[j], ms.cves[i]
}

// Less is part of sort.Interface. It is implemented by looping along the
// less functions until it finds a comparison that is either Less or !Less.
func (ms *multiSorter) Less(i, j int) bool {
	p, q := &ms.cves[i], &ms.cves[j]
	// Try all but the last comparison.
	var k int
	for k = 0; k < len(ms.less)-1; k++ {
		less := ms.less[k]
		switch {
		case less(p, q):
			// p < q, so we have a decision.
			return true
		case less(q, p):
			// p > q, so we have a decision.
			return false
		}
		// p == q; try the next comparison.
	}
	// All comparisons to here said "equal", so just return whatever
	// the final comparison reports.
	return ms.less[k](p, q)
}

func cveValue(s string) string {
	cve := strings.Split(s, "-")
	return cve[0] + cve[1]
}

func scoreSort(cvsslist []CVSS) {
	score := func(c1, c2 *CVSS) bool {
		return c1.Score > c2.Score
	}
	cve := func(c1, c2 *CVSS) bool {
		return cveValue(c1.CVE) < cveValue(c2.CVE)
	}

	OrderedBy(score, cve).Sort(cvsslist)
}
