package main

import (
	"fmt"
	"github.com/PuerkitoBio/goquery"
	"github.com/docopt/docopt.go"
	"io/ioutil"
	"log"
	"regexp"
	"strconv"
	"strings"
)

type CVSS struct {
	CVE    string
	Score  float64
	Rating string
	Detail string
	URL    string
}

func plainPrint(cvsslist []CVSS) {
	for _, cve := range cvsslist {
		fmt.Printf("%v,%v,%v,%v,%v\n", cve.CVE, cve.Score, cve.Rating, cve.Detail, cve.URL)
	}
}

func htmlPrint(cvsslist []CVSS) {
	fmt.Println("<html>")
	fmt.Println("\t<head>")
	fmt.Println("\t\t<title>CVE List</title>")
	fmt.Println("\t\t<link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.2/css/bootstrap.min.css\" />")
	fmt.Println("\t</head>")
	fmt.Println("\t<body>")
	fmt.Println("\t\t<div class=\"controller\"></div>")
	fmt.Println("\t\t<div class=\"row\">")
	fmt.Println("\t\t\t<div class=\"col-xs-8 col-xs-offset-2\">")
	fmt.Println("\t\t\t\t<center><h2>CVSS Details</h2></center>")
	for _, cve := range cvsslist {
		fmt.Println("\t\t\t\t<div class=\"row\">")
		fmt.Println("\t\t\t\t\t<div class=\"col-xs-1\" style=\"width: auto\">")
		fmt.Printf("\t\t\t\t\t\t<a href=\"http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-%v\">%v</a>\n", cve.CVE, cve.CVE)
		fmt.Println("\t\t\t\t\t</div>")
		fmt.Println("\t\t\t\t\t<div class=\"col-xs-1\" style=\"width: auto\">")
		fmt.Printf("\t\t\t\t\t\t%v\n", cve.Score)
		fmt.Println("\t\t\t\t\t</div>")
		fmt.Println("\t\t\t\t\t<div class=\"col-xs-1\" style=\"width: auto\">")
		fmt.Printf("\t\t\t\t\t\t%v\n", cve.Rating)
		fmt.Println("\t\t\t\t\t</div>")
		fmt.Println("\t\t\t\t\t<div class=\"col-xs-2\" style=\"width: 70%\">")
		fmt.Printf("\t\t\t\t\t\t%v\n", cve.Detail)
		fmt.Println("\t\t\t\t\t</div>")
		fmt.Println("\t\t\t\t</div>")
	}
	fmt.Println("\t\t\t</div>")
	fmt.Println("\t\t</div>")
	fmt.Println("\t\t<div class=\"row\">")
	fmt.Println("\t\t\t<div class=\"col-xs-12\"</div>")
	fmt.Println("\t\t</div>")
	fmt.Println("\t\t<div class=\"row\">")
	fmt.Println("\t\t\t<div class=\"col-xs-3 col-xs-offset-2\">")
	fmt.Println("\t\t\t\t<center><h2>CVSS List</h2></center>")
	fmt.Println("\t\t\t</div>")
	fmt.Println("\t\t</div>")
	for _, cve := range cvsslist {
		fmt.Println("\t\t<div class=\"row\">")
		fmt.Println("\t\t\t<div class=\"col-xs-1 col-xs-offset-2\">")
		fmt.Printf("\t\t\t\t<a href=\"http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-%v\">%v</a>\n", cve.CVE, cve.CVE)
		fmt.Println("\t\t\t</div>")
		fmt.Println("\t\t</div>")
	}
	fmt.Println("<br><br>")
	fmt.Println("\t</body>")
	fmt.Println("</html>")
}

func cveDetails(cve string, result string, details []string) CVSS {
	var cvs CVSS
	re := regexp.MustCompile(`CVSS v2 Base Score: (.*?) \((.*?)\)`)
	r := re.FindStringSubmatch(result)
	score, err := strconv.ParseFloat(r[1], 64)
	if err != nil {
		log.Fatal(err.Error())
	}

	cvs = CVSS{
		CVE:    cve,
		Score:  score,
		Rating: r[2],
		Detail: details[0],
		URL:    "http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-" + cve,
	}

	return cvs
}

func cleanString(s string) string {
	re := regexp.MustCompile(`\s+`)
	newstring := strings.Replace(s, "\n", "", -1)
	newstring = re.ReplaceAllString(newstring, " ")

	return newstring
}

func filterSEV(list []CVSS, sev string) []CVSS {
	var newList []CVSS

	for _, cve := range list {
		if cve.Rating == sev {
			newList = append(newList, cve)
		}
	}

	return newList
}

func filterRating(list []CVSS, low float64, high float64) []CVSS {
	var newList []CVSS

	for _, cve := range list {
		if cve.Score >= low && cve.Score <= high {
			newList = append(newList, cve)
		}
	}

	return newList
}

func main() {
	var cvsslist []CVSS

	arguments, err := docopt.Parse(usage, nil, true, "cve-parser 0.3", false)
	if err != nil {
		log.Fatal("Error parsing usage. Error: ", err.Error())
	}

	f := arguments["<file>"].(string)
	var sev string
	var low, high float64

	if arguments["--sev"] != nil {
		sev = strings.ToUpper(arguments["--sev"].(string))
	}
	if arguments["--range"] != nil {
		r := strings.Split(arguments["--range"].(string), ",")

		low, err = strconv.ParseFloat(r[0], 64)
		if err != nil {
			log.Fatal(err.Error())
		}
		high, err = strconv.ParseFloat(r[1], 64)
		if err != nil {
			log.Fatal(err.Error())
		}
	}

	data, err := ioutil.ReadFile(f)
	if err != nil {
		log.Fatal(err.Error())
	}
	cvelist := strings.Split(string(data), "\n")

	for _, cve := range cvelist {
		re := regexp.MustCompile(`\d{4}-\d{4}`)
		if cve == "" {
			continue
		} else if !re.MatchString(cve) {
			log.Fatalf("%v is an improper CVE", cve)
		}

		doc, err := goquery.NewDocument("http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-" + cve)
		if err != nil {
			log.Fatal(err.Error())
		}
		vulnDetails := strings.Split(doc.Find(".vulnDetail").Find("p").Text(), "\n")
		cvssdetail := cleanString(doc.Find(".cvssDetail").Text())
		cvsslist = append(cvsslist, cveDetails(cve, cvssdetail, vulnDetails))
	}

	if sev != "" {
		cvsslist = filterSEV(cvsslist, sev)
	} else if low != 0 || high != 0 {
		cvsslist = filterRating(cvsslist, low, high)
	}
	listSort(cvsslist)

	if arguments["--html"].(bool) {
		htmlPrint(cvsslist)
	} else {
		plainPrint(cvsslist)
	}
}
