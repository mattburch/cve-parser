package main

import (
	"fmt"
	"github.com/PuerkitoBio/goquery"
	"github.com/docopt/docopt.go"
	"io/ioutil"
	"log"
	"regexp"
	"strings"
)

type CVSS struct {
	CVE    string
	Score  string
	Rating string
	URL    string
}

func (cvs CVSS) printCVSS() {
	fmt.Printf("%v %v %v %v\n", cvs.CVE, cvs.Score, cvs.Rating, cvs.URL)
}

func cveDetails(cve string, result string) CVSS {
	var cvs CVSS
	re := regexp.MustCompile(`CVSS v2 Base Score: (.*?) \((.*?)\)`)
	r := re.FindStringSubmatch(result)

	cvs = CVSS{
		CVE:    cve,
		Score:  r[1],
		Rating: r[2],
		URL:    "http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-" + cve,
	}

	return cvs
}

func cleanString(s string) string {
	re := regexp.MustCompile(`\s+`)
	newstring := strings.Replace(s, "\n", "", -1)
	newstring = re.ReplaceAllString(newstring, " ")

	return newstring
}

func main() {
	arguments, err := docopt.Parse(usage, nil, true, "cve-parser 0.1", false)
	if err != nil {
		log.Fatal("Error parsing usage. Error: ", err.Error())
	}

	f := arguments["<file>"].(string)

	data, err := ioutil.ReadFile(f)
	if err != nil {
		log.Fatal(err.Error())
	}
	cvelist := strings.Split(string(data), "\n")

	for _, cve := range cvelist {
		if cve == "" {
			return
		}
		doc, err := goquery.NewDocument("http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-" + cve)
		if err != nil {
			log.Fatal(err.Error())
		}
		cvssdetail := cleanString(doc.Find(".cvssDetail").Text())
		cveDetails(cve, cvssdetail).printCVSS()

	}
}
